- Most important part is the DataFrame
    - holds data like a table in database (think excel, SQL)
    - can construct with dict as such:
    df = pd.DataFrame({ 'colName': value })
    
- Extracting columns via df['col'] returns a Pandas Series

Filtering Data
--------------
-boolean indexing allows us to filter the DataFrame by using boolean arrays or conditions
- &, | operators
ex:
    products: pd.DataFrame
    df = products[(products['recyclable'] == 'Y') & ..]

- ~ (bitwise not -> inversing boolean mask), represents logical negation
- isin()
ex: 
    # ~isin(values) selects rows if their values are NOT present in values
    # select rows in which `id` not present in orders['customerId']
    df = customers[~customers['id'].isin(orders['customerId'])]


String Methods
--------------
- formatted like df.col.str.method()
 
- .str.contains(regex)
- .str.len()


Data Manipulation & Access
--------------------------
- col.rename(columns={'name': 'new_name'}, inplace=bool) -> df.columns = ['col1','col2']
- .sort_values(by=col)
- .drop_duplicates(subset=col, keep='', inplace=bool)
- .iloc[row (zero-indexed)]
- .merge(df, df1, left_on='PID', right_on='FID', how='inner') -> merging values from two DataFrames (very important)
- .groupby() (very important)
- .transform()
- .map() -> to dict